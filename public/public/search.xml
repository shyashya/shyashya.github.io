<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo-next主题踩坑记录</title>
      <link href="/2020/03/08/hexo-next%E4%B8%BB%E9%A2%98%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/03/08/hexo-next%E4%B8%BB%E9%A2%98%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>说明：本篇记录了hexo部署以后关于<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT.Mist</a> v5.1.4版本添加评论、搜索功能、统计访问量以及人数、添加看板娘的步骤及填坑方法（持续更新～）</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ocrmypdf</title>
      <link href="/2020/03/04/ocrmypdf%20usage/"/>
      <url>/2020/03/04/ocrmypdf%20usage/</url>
      
        <content type="html"><![CDATA[<h4 id="Mac安装ocrmypdf以及使用命令"><a href="#Mac安装ocrmypdf以及使用命令" class="headerlink" title="Mac安装ocrmypdf以及使用命令"></a>Mac安装ocrmypdf以及使用命令</h4><ol><li><p>使用brew安装ocrmypdf</p><p><code>brew install ocrmypdf</code></p></li><li><p>下载语言库，地址<a href="https://github.com/tesseract-ocr/tessdata" target="_blank" rel="noopener">github语言库</a></p><p>注意：此github库完全clone下来，大小达到了 4.86GB。可以直接在github上，单独下载中文语言包（42MB）。</p><p>选择简体中文<code>chi_sim.traineddata</code>、英文<code>eng.traineddata</code></p><p>将文件拷贝到：<code>/usr/local/Cellar/tesseract/4.1.1/share/tessdata</code>  目录下</p></li><li><p>使用命令转换，将<strong>图片式的PDF</strong>转换成<strong>文本式的PDF</strong></p><p><code>ocrmypdf -l chi_sim your_image_version.pdf output_file_name.pdf</code></p><p>注意这里要指定语言版本<code>-l chi_sim</code> ，否则转换后的文字版pdf，文字复制出来会是乱码。</p></li></ol><blockquote><p><code>tesseract --help</code>  命令可以查看Tesseract使用</p><p><code>esseract --list-langs</code>  命令查看本地存在的语言库</p><p>​                        <a href="https://github.com/jbarlow83/OCRmyPDF" target="_blank" rel="noopener">jbarlow83/<strong>OCRmyPDF</strong></a></p><p>​                        <a href="https://ocrmypdf.readthedocs.io/en/latest/cookbook.html#basic-examples" target="_blank" rel="noopener">ocrmypdf最全使用命令</a></p></blockquote><h4 id="将图片转成文本"><a href="#将图片转成文本" class="headerlink" title="将图片转成文本"></a>将图片转成文本</h4><p>使用上述安装好ocrmypdf之后，其实也默认安装好了tesseract。直接使用即可。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tesseract -l chi_sim test<span class="selector-class">.png</span> result</span><br></pre></td></tr></table></figure><h4 id="将文字版PDF转换成txt数据"><a href="#将文字版PDF转换成txt数据" class="headerlink" title="将文字版PDF转换成txt数据"></a>将文字版PDF转换成txt数据</h4><p>环境：python3.7+pycharm</p><p>操作系统：Mac</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfinterp <span class="keyword">import</span> PDFPageInterpreter, PDFResourceManager</span><br><span class="line"><span class="keyword">from</span> pdfminer.converter <span class="keyword">import</span> TextConverter, PDFPageAggregator</span><br><span class="line"><span class="keyword">from</span> pdfminer.layout <span class="keyword">import</span> LAParams</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfparser <span class="keyword">import</span> PDFParser</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfdocument <span class="keyword">import</span> PDFDocument</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfdevice <span class="keyword">import</span> PDFDevice</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfpage <span class="keyword">import</span> PDFPage</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 获取pdf文档</span></span><br><span class="line">fp = open(<span class="string">'zh2003.pdf'</span>, <span class="string">'rb'</span>)</span><br><span class="line"><span class="comment"># 创建一个与文档相关的解释器</span></span><br><span class="line">parser = PDFParser(fp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pdf文档的对象，与解释器连接起来</span></span><br><span class="line">doc = PDFDocument(parser=parser)</span><br><span class="line">parser.set_document(doc=doc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是加密pdf，则输入密码</span></span><br><span class="line"><span class="comment"># doc._initialize_password()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建pdf资源管理器</span></span><br><span class="line">resource = PDFResourceManager()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数分析器</span></span><br><span class="line">laparam = LAParams()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个聚合器</span></span><br><span class="line">device = PDFPageAggregator(resource, laparams=laparam)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建pdf页面解释器</span></span><br><span class="line">interpreter = PDFPageInterpreter(resource, device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取页面的集合</span></span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> PDFPage.get_pages(fp):</span><br><span class="line">    <span class="comment"># 使用页面解释器来读取</span></span><br><span class="line">    interpreter.process_page(page)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用聚合器来获取内容</span></span><br><span class="line">    layout = device.get_result()</span><br><span class="line">    <span class="keyword">for</span> out <span class="keyword">in</span> layout:</span><br><span class="line">        <span class="keyword">if</span> hasattr(out, <span class="string">'get_text'</span>):</span><br><span class="line">            <span class="comment"># print(out.get_text())</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 写入txt文件</span></span><br><span class="line">            fw = codecs.open(<span class="string">'zh2003.txt'</span>, <span class="string">'aw'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">            fw.write(out.get_text())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> fw.closed:</span><br><span class="line">        fw.close()</span><br></pre></td></tr></table></figure><p>参考文档</p><p><a href="https://github.com/tesseract-ocr/tessdata" target="_blank" rel="noopener">tesseract-ocr/<strong>tessdata</strong></a></p><p><a href="https://www.jianshu.com/p/719c053f170b" target="_blank" rel="noopener">Mac安装使用tesseract-ocr</a></p><p><a href="https://blog.csdn.net/u010670689/article/details/78374623" target="_blank" rel="noopener">mac上文字识别(Tesseract-OCR for mac )</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ocrmypdf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>neo4j+mac学习</title>
      <link href="/2019/09/28/neo4j-mac%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/09/28/neo4j-mac%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="neo4j软件安装"><a href="#neo4j软件安装" class="headerlink" title="neo4j软件安装"></a>neo4j软件安装</h4><p>(我的电脑已经安装了JDK)</p><ol><li><p>从官网下载neo4j的社区版<a href="https://neo4j.com/download-center/#community" target="_blank" rel="noopener">Linux/Mac</a></p></li><li><p>解压，使用命令</p><p><code>tar -xzvf neo4j-community-3.5.11-unix.tar.gz</code></p><p>解压后到文件夹，嫌文件夹名字太长可以换个名字</p></li><li><p>使用命令</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> neo4j</span><br><span class="line"><span class="built_in">cd</span> bin</span><br><span class="line">./neo4j <span class="built_in">start</span></span><br></pre></td></tr></table></figure><p>但是我的总是显示“找不到或无法加载主类 org.neo4j.server.CommunityEntry”，别人的没有问题。所以我换成了brew安装，就很方便了，命令如下：</p></li><li><p><code>brew install neo4j</code></p></li><li><code>neo4j start</code></li><li>在浏览器中打开<code>localhost:7474</code>访问，就可以看到登陆页面</li></ol>]]></content>
      
      
      <categories>
          
          <category> 图数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识图谱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transformer详解</title>
      <link href="/2019/06/12/Transformer%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/06/12/Transformer%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>Transformer由论文<a href="https://arxiv.org/abs/1706.03762" target="_blank" rel="noopener">《Attention is All You Need》</a>提出，现在是谷歌云TPU推荐的参考模型。论文相关的Tensorflow的代码可以从GitHub获取，其作为Tensor2Tensor包的一部分。哈佛的NLP团队也实现了一个基于PyTorch的版本，并注释该论文。</p><p>首先将这个模型看成黑箱操作，在机器翻译中，这个就是输入一种语言，然后输出另一种语言。它由编码器和解码器构成</p><p><img src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=4126392950,3341841386&amp;fm=173&amp;app=49&amp;f=JPEG?w=640&amp;h=449&amp;s=CFE0A052198F50C8047D40DA0100F0B2" alt="transformer 图片"></p><p>一个编码器的内部</p><p><img src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=102064403,905657909&amp;fm=173&amp;app=49&amp;f=JPEG?w=640&amp;h=399&amp;s=04F274320BCF414952E9E1C8020030B2" alt="一个编码器"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Bert </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bert环境配置</title>
      <link href="/2019/06/03/Bert%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/06/03/Bert%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="anaconda管理python版本"><a href="#anaconda管理python版本" class="headerlink" title="anaconda管理python版本"></a>anaconda管理python版本</h4><p>查看电脑当前的python版本</p><p><code>python --version</code></p><p>如果电脑的版本是3.7的，那么使用以下命令来创建2.7版本的</p><p><code>conda create -n python27 python=2.7</code></p><p>然后通过下面这个命令激活刚刚创建的python2.7</p><p><code>conda activate python27</code></p><p>如果不需要使用python2.7版本的，通过下面的来关闭,这样就会到了原始的版本</p><p><code>conda deactivate</code></p><h4 id="安装tensorflow"><a href="#安装tensorflow" class="headerlink" title="安装tensorflow"></a>安装tensorflow</h4><p>先建立tensorflow运行环境</p><p><code>conda create -n tensorflow python=2.7</code></p><p>然后激活刚刚的环境（与上面类似）</p><p><code>conda activate tensorflow</code></p><p>最后执行下面的命令来安装tensorflow</p><p><code>pip install tensorflow</code></p><p>进入python环境，执行以下代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">hello = tf.constant(<span class="string">'Hello, Tensorflow!'</span>)</span><br><span class="line">sess = tf.Session()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(sess.run(hello)</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = tf.constant(<span class="number">66</span>)</span><br><span class="line"><span class="selector-tag">b</span> = tf.constant(<span class="number">88</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(sess.run(a + b)</span></span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello, Tensorflow!</span><br><span class="line">154</span><br></pre></td></tr></table></figure><p>那么就成功了</p><h4 id="pip安装的一些问题"><a href="#pip安装的一些问题" class="headerlink" title="pip安装的一些问题"></a>pip安装的一些问题</h4><p>在切换不同的环境以后，跑别人的模型时需要安装一些包，默认的源经常会碰到超时的问题，可以通过一下的方式解决：</p><h5 id="源问题"><a href="#源问题" class="headerlink" title="源问题"></a>源问题</h5><ol><li><p>直接使用pip安装的时候在命令后面加上  -i 源 如：</p><p><code>pip install xx -i https://pypi.tuna.tsinghua.edu.cn/simple/</code></p><p>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a></p><p>豆瓣(douban) <a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a></p><p>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a></p><p>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a></p><p>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/simple/</a></p><p>如果出现源不受信任的提示，那么就可以这样写</p><p><code>pip install xx -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.edu.cn</code></p></li></ol><ol start="2"><li><p>直接改变默认源，这样就不用每次在后面添加一大串了</p><p>当前的虚拟环境下面新建pip.conf文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd ~/</span><br><span class="line"></span><br><span class="line">mkdir .pip</span><br><span class="line"></span><br><span class="line">cd .pip</span><br><span class="line"></span><br><span class="line">touch pip<span class="selector-class">.conf</span> </span><br><span class="line"></span><br><span class="line">vim pip.conf</span><br></pre></td></tr></table></figure><p>打开以后添加以下代码</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple/ #这个pypi源自己定义</span><br><span class="line"><span class="section">[install]</span></span><br><span class="line"><span class="attr">trusted-host</span>=pypi.tuna.tsinghua.edu.cn  # 这个也是根据pypi源自己定义</span><br></pre></td></tr></table></figure><p>然后以后默认就是清华的源了</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bert </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
